// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-gql-sample/app/ent/arinternalmetadatum"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArInternalMetadatumCreate is the builder for creating a ArInternalMetadatum entity.
type ArInternalMetadatumCreate struct {
	config
	mutation *ArInternalMetadatumMutation
	hooks    []Hook
}

// SetValue sets the "value" field.
func (aimc *ArInternalMetadatumCreate) SetValue(s string) *ArInternalMetadatumCreate {
	aimc.mutation.SetValue(s)
	return aimc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (aimc *ArInternalMetadatumCreate) SetNillableValue(s *string) *ArInternalMetadatumCreate {
	if s != nil {
		aimc.SetValue(*s)
	}
	return aimc
}

// SetCreatedAt sets the "created_at" field.
func (aimc *ArInternalMetadatumCreate) SetCreatedAt(t time.Time) *ArInternalMetadatumCreate {
	aimc.mutation.SetCreatedAt(t)
	return aimc
}

// SetUpdatedAt sets the "updated_at" field.
func (aimc *ArInternalMetadatumCreate) SetUpdatedAt(t time.Time) *ArInternalMetadatumCreate {
	aimc.mutation.SetUpdatedAt(t)
	return aimc
}

// SetID sets the "id" field.
func (aimc *ArInternalMetadatumCreate) SetID(s string) *ArInternalMetadatumCreate {
	aimc.mutation.SetID(s)
	return aimc
}

// Mutation returns the ArInternalMetadatumMutation object of the builder.
func (aimc *ArInternalMetadatumCreate) Mutation() *ArInternalMetadatumMutation {
	return aimc.mutation
}

// Save creates the ArInternalMetadatum in the database.
func (aimc *ArInternalMetadatumCreate) Save(ctx context.Context) (*ArInternalMetadatum, error) {
	return withHooks[*ArInternalMetadatum, ArInternalMetadatumMutation](ctx, aimc.sqlSave, aimc.mutation, aimc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (aimc *ArInternalMetadatumCreate) SaveX(ctx context.Context) *ArInternalMetadatum {
	v, err := aimc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aimc *ArInternalMetadatumCreate) Exec(ctx context.Context) error {
	_, err := aimc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aimc *ArInternalMetadatumCreate) ExecX(ctx context.Context) {
	if err := aimc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aimc *ArInternalMetadatumCreate) check() error {
	if _, ok := aimc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ArInternalMetadatum.created_at"`)}
	}
	if _, ok := aimc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ArInternalMetadatum.updated_at"`)}
	}
	return nil
}

func (aimc *ArInternalMetadatumCreate) sqlSave(ctx context.Context) (*ArInternalMetadatum, error) {
	if err := aimc.check(); err != nil {
		return nil, err
	}
	_node, _spec := aimc.createSpec()
	if err := sqlgraph.CreateNode(ctx, aimc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ArInternalMetadatum.ID type: %T", _spec.ID.Value)
		}
	}
	aimc.mutation.id = &_node.ID
	aimc.mutation.done = true
	return _node, nil
}

func (aimc *ArInternalMetadatumCreate) createSpec() (*ArInternalMetadatum, *sqlgraph.CreateSpec) {
	var (
		_node = &ArInternalMetadatum{config: aimc.config}
		_spec = sqlgraph.NewCreateSpec(arinternalmetadatum.Table, sqlgraph.NewFieldSpec(arinternalmetadatum.FieldID, field.TypeString))
	)
	if id, ok := aimc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := aimc.mutation.Value(); ok {
		_spec.SetField(arinternalmetadatum.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := aimc.mutation.CreatedAt(); ok {
		_spec.SetField(arinternalmetadatum.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := aimc.mutation.UpdatedAt(); ok {
		_spec.SetField(arinternalmetadatum.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ArInternalMetadatumCreateBulk is the builder for creating many ArInternalMetadatum entities in bulk.
type ArInternalMetadatumCreateBulk struct {
	config
	builders []*ArInternalMetadatumCreate
}

// Save creates the ArInternalMetadatum entities in the database.
func (aimcb *ArInternalMetadatumCreateBulk) Save(ctx context.Context) ([]*ArInternalMetadatum, error) {
	specs := make([]*sqlgraph.CreateSpec, len(aimcb.builders))
	nodes := make([]*ArInternalMetadatum, len(aimcb.builders))
	mutators := make([]Mutator, len(aimcb.builders))
	for i := range aimcb.builders {
		func(i int, root context.Context) {
			builder := aimcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ArInternalMetadatumMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aimcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aimcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aimcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aimcb *ArInternalMetadatumCreateBulk) SaveX(ctx context.Context) []*ArInternalMetadatum {
	v, err := aimcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aimcb *ArInternalMetadatumCreateBulk) Exec(ctx context.Context) error {
	_, err := aimcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aimcb *ArInternalMetadatumCreateBulk) ExecX(ctx context.Context) {
	if err := aimcb.Exec(ctx); err != nil {
		panic(err)
	}
}
