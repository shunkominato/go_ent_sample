// Code generated by ent, DO NOT EDIT.

package todo

import (
	"go-gql-sample/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Todo {
	return predicate.Todo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Todo {
	return predicate.Todo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Todo {
	return predicate.Todo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Todo {
	return predicate.Todo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Todo {
	return predicate.Todo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Todo {
	return predicate.Todo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Todo {
	return predicate.Todo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Todo {
	return predicate.Todo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Todo {
	return predicate.Todo(sql.FieldLTE(FieldID, id))
}

// Todo applies equality check predicate on the "todo" field. It's identical to TodoEQ.
func Todo(v string) predicate.Todo {
	return predicate.Todo(sql.FieldEQ(FieldTodo, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Todo {
	return predicate.Todo(sql.FieldEQ(FieldUserID, v))
}

// TodoStatusesID applies equality check predicate on the "todo_statuses_id" field. It's identical to TodoStatusesIDEQ.
func TodoStatusesID(v int) predicate.Todo {
	return predicate.Todo(sql.FieldEQ(FieldTodoStatusesID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldEQ(FieldUpdatedAt, v))
}

// TodoEQ applies the EQ predicate on the "todo" field.
func TodoEQ(v string) predicate.Todo {
	return predicate.Todo(sql.FieldEQ(FieldTodo, v))
}

// TodoNEQ applies the NEQ predicate on the "todo" field.
func TodoNEQ(v string) predicate.Todo {
	return predicate.Todo(sql.FieldNEQ(FieldTodo, v))
}

// TodoIn applies the In predicate on the "todo" field.
func TodoIn(vs ...string) predicate.Todo {
	return predicate.Todo(sql.FieldIn(FieldTodo, vs...))
}

// TodoNotIn applies the NotIn predicate on the "todo" field.
func TodoNotIn(vs ...string) predicate.Todo {
	return predicate.Todo(sql.FieldNotIn(FieldTodo, vs...))
}

// TodoGT applies the GT predicate on the "todo" field.
func TodoGT(v string) predicate.Todo {
	return predicate.Todo(sql.FieldGT(FieldTodo, v))
}

// TodoGTE applies the GTE predicate on the "todo" field.
func TodoGTE(v string) predicate.Todo {
	return predicate.Todo(sql.FieldGTE(FieldTodo, v))
}

// TodoLT applies the LT predicate on the "todo" field.
func TodoLT(v string) predicate.Todo {
	return predicate.Todo(sql.FieldLT(FieldTodo, v))
}

// TodoLTE applies the LTE predicate on the "todo" field.
func TodoLTE(v string) predicate.Todo {
	return predicate.Todo(sql.FieldLTE(FieldTodo, v))
}

// TodoContains applies the Contains predicate on the "todo" field.
func TodoContains(v string) predicate.Todo {
	return predicate.Todo(sql.FieldContains(FieldTodo, v))
}

// TodoHasPrefix applies the HasPrefix predicate on the "todo" field.
func TodoHasPrefix(v string) predicate.Todo {
	return predicate.Todo(sql.FieldHasPrefix(FieldTodo, v))
}

// TodoHasSuffix applies the HasSuffix predicate on the "todo" field.
func TodoHasSuffix(v string) predicate.Todo {
	return predicate.Todo(sql.FieldHasSuffix(FieldTodo, v))
}

// TodoEqualFold applies the EqualFold predicate on the "todo" field.
func TodoEqualFold(v string) predicate.Todo {
	return predicate.Todo(sql.FieldEqualFold(FieldTodo, v))
}

// TodoContainsFold applies the ContainsFold predicate on the "todo" field.
func TodoContainsFold(v string) predicate.Todo {
	return predicate.Todo(sql.FieldContainsFold(FieldTodo, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Todo {
	return predicate.Todo(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Todo {
	return predicate.Todo(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Todo {
	return predicate.Todo(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Todo {
	return predicate.Todo(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDIsNil applies the IsNil predicate on the "user_id" field.
func UserIDIsNil() predicate.Todo {
	return predicate.Todo(sql.FieldIsNull(FieldUserID))
}

// UserIDNotNil applies the NotNil predicate on the "user_id" field.
func UserIDNotNil() predicate.Todo {
	return predicate.Todo(sql.FieldNotNull(FieldUserID))
}

// TodoStatusesIDEQ applies the EQ predicate on the "todo_statuses_id" field.
func TodoStatusesIDEQ(v int) predicate.Todo {
	return predicate.Todo(sql.FieldEQ(FieldTodoStatusesID, v))
}

// TodoStatusesIDNEQ applies the NEQ predicate on the "todo_statuses_id" field.
func TodoStatusesIDNEQ(v int) predicate.Todo {
	return predicate.Todo(sql.FieldNEQ(FieldTodoStatusesID, v))
}

// TodoStatusesIDIn applies the In predicate on the "todo_statuses_id" field.
func TodoStatusesIDIn(vs ...int) predicate.Todo {
	return predicate.Todo(sql.FieldIn(FieldTodoStatusesID, vs...))
}

// TodoStatusesIDNotIn applies the NotIn predicate on the "todo_statuses_id" field.
func TodoStatusesIDNotIn(vs ...int) predicate.Todo {
	return predicate.Todo(sql.FieldNotIn(FieldTodoStatusesID, vs...))
}

// TodoStatusesIDIsNil applies the IsNil predicate on the "todo_statuses_id" field.
func TodoStatusesIDIsNil() predicate.Todo {
	return predicate.Todo(sql.FieldIsNull(FieldTodoStatusesID))
}

// TodoStatusesIDNotNil applies the NotNil predicate on the "todo_statuses_id" field.
func TodoStatusesIDNotNil() predicate.Todo {
	return predicate.Todo(sql.FieldNotNull(FieldTodoStatusesID))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Todo {
	return predicate.Todo(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTodoStatu applies the HasEdge predicate on the "todo_statu" edge.
func HasTodoStatu() predicate.Todo {
	return predicate.Todo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TodoStatuTable, TodoStatuColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTodoStatuWith applies the HasEdge predicate on the "todo_statu" edge with a given conditions (other predicates).
func HasTodoStatuWith(preds ...predicate.TodoStatus) predicate.Todo {
	return predicate.Todo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TodoStatuInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TodoStatuTable, TodoStatuColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Todo {
	return predicate.Todo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Todo {
	return predicate.Todo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Todo) predicate.Todo {
	return predicate.Todo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Todo) predicate.Todo {
	return predicate.Todo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Todo) predicate.Todo {
	return predicate.Todo(func(s *sql.Selector) {
		p(s.Not())
	})
}
