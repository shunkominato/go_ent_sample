// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"go-gql-sample/app/ent/migrate"

	"go-gql-sample/app/ent/arinternalmetadatum"
	"go-gql-sample/app/ent/schemamigration"
	"go-gql-sample/app/ent/todo"
	"go-gql-sample/app/ent/todostatus"
	"go-gql-sample/app/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ArInternalMetadatum is the client for interacting with the ArInternalMetadatum builders.
	ArInternalMetadatum *ArInternalMetadatumClient
	// SchemaMigration is the client for interacting with the SchemaMigration builders.
	SchemaMigration *SchemaMigrationClient
	// Todo is the client for interacting with the Todo builders.
	Todo *TodoClient
	// TodoStatus is the client for interacting with the TodoStatus builders.
	TodoStatus *TodoStatusClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ArInternalMetadatum = NewArInternalMetadatumClient(c.config)
	c.SchemaMigration = NewSchemaMigrationClient(c.config)
	c.Todo = NewTodoClient(c.config)
	c.TodoStatus = NewTodoStatusClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		ArInternalMetadatum: NewArInternalMetadatumClient(cfg),
		SchemaMigration:     NewSchemaMigrationClient(cfg),
		Todo:                NewTodoClient(cfg),
		TodoStatus:          NewTodoStatusClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		ArInternalMetadatum: NewArInternalMetadatumClient(cfg),
		SchemaMigration:     NewSchemaMigrationClient(cfg),
		Todo:                NewTodoClient(cfg),
		TodoStatus:          NewTodoStatusClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ArInternalMetadatum.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ArInternalMetadatum.Use(hooks...)
	c.SchemaMigration.Use(hooks...)
	c.Todo.Use(hooks...)
	c.TodoStatus.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.ArInternalMetadatum.Intercept(interceptors...)
	c.SchemaMigration.Intercept(interceptors...)
	c.Todo.Intercept(interceptors...)
	c.TodoStatus.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ArInternalMetadatumMutation:
		return c.ArInternalMetadatum.mutate(ctx, m)
	case *SchemaMigrationMutation:
		return c.SchemaMigration.mutate(ctx, m)
	case *TodoMutation:
		return c.Todo.mutate(ctx, m)
	case *TodoStatusMutation:
		return c.TodoStatus.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ArInternalMetadatumClient is a client for the ArInternalMetadatum schema.
type ArInternalMetadatumClient struct {
	config
}

// NewArInternalMetadatumClient returns a client for the ArInternalMetadatum from the given config.
func NewArInternalMetadatumClient(c config) *ArInternalMetadatumClient {
	return &ArInternalMetadatumClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `arinternalmetadatum.Hooks(f(g(h())))`.
func (c *ArInternalMetadatumClient) Use(hooks ...Hook) {
	c.hooks.ArInternalMetadatum = append(c.hooks.ArInternalMetadatum, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `arinternalmetadatum.Intercept(f(g(h())))`.
func (c *ArInternalMetadatumClient) Intercept(interceptors ...Interceptor) {
	c.inters.ArInternalMetadatum = append(c.inters.ArInternalMetadatum, interceptors...)
}

// Create returns a builder for creating a ArInternalMetadatum entity.
func (c *ArInternalMetadatumClient) Create() *ArInternalMetadatumCreate {
	mutation := newArInternalMetadatumMutation(c.config, OpCreate)
	return &ArInternalMetadatumCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ArInternalMetadatum entities.
func (c *ArInternalMetadatumClient) CreateBulk(builders ...*ArInternalMetadatumCreate) *ArInternalMetadatumCreateBulk {
	return &ArInternalMetadatumCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ArInternalMetadatum.
func (c *ArInternalMetadatumClient) Update() *ArInternalMetadatumUpdate {
	mutation := newArInternalMetadatumMutation(c.config, OpUpdate)
	return &ArInternalMetadatumUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ArInternalMetadatumClient) UpdateOne(aim *ArInternalMetadatum) *ArInternalMetadatumUpdateOne {
	mutation := newArInternalMetadatumMutation(c.config, OpUpdateOne, withArInternalMetadatum(aim))
	return &ArInternalMetadatumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ArInternalMetadatumClient) UpdateOneID(id string) *ArInternalMetadatumUpdateOne {
	mutation := newArInternalMetadatumMutation(c.config, OpUpdateOne, withArInternalMetadatumID(id))
	return &ArInternalMetadatumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ArInternalMetadatum.
func (c *ArInternalMetadatumClient) Delete() *ArInternalMetadatumDelete {
	mutation := newArInternalMetadatumMutation(c.config, OpDelete)
	return &ArInternalMetadatumDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ArInternalMetadatumClient) DeleteOne(aim *ArInternalMetadatum) *ArInternalMetadatumDeleteOne {
	return c.DeleteOneID(aim.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ArInternalMetadatumClient) DeleteOneID(id string) *ArInternalMetadatumDeleteOne {
	builder := c.Delete().Where(arinternalmetadatum.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ArInternalMetadatumDeleteOne{builder}
}

// Query returns a query builder for ArInternalMetadatum.
func (c *ArInternalMetadatumClient) Query() *ArInternalMetadatumQuery {
	return &ArInternalMetadatumQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeArInternalMetadatum},
		inters: c.Interceptors(),
	}
}

// Get returns a ArInternalMetadatum entity by its id.
func (c *ArInternalMetadatumClient) Get(ctx context.Context, id string) (*ArInternalMetadatum, error) {
	return c.Query().Where(arinternalmetadatum.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ArInternalMetadatumClient) GetX(ctx context.Context, id string) *ArInternalMetadatum {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ArInternalMetadatumClient) Hooks() []Hook {
	return c.hooks.ArInternalMetadatum
}

// Interceptors returns the client interceptors.
func (c *ArInternalMetadatumClient) Interceptors() []Interceptor {
	return c.inters.ArInternalMetadatum
}

func (c *ArInternalMetadatumClient) mutate(ctx context.Context, m *ArInternalMetadatumMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ArInternalMetadatumCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ArInternalMetadatumUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ArInternalMetadatumUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ArInternalMetadatumDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ArInternalMetadatum mutation op: %q", m.Op())
	}
}

// SchemaMigrationClient is a client for the SchemaMigration schema.
type SchemaMigrationClient struct {
	config
}

// NewSchemaMigrationClient returns a client for the SchemaMigration from the given config.
func NewSchemaMigrationClient(c config) *SchemaMigrationClient {
	return &SchemaMigrationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `schemamigration.Hooks(f(g(h())))`.
func (c *SchemaMigrationClient) Use(hooks ...Hook) {
	c.hooks.SchemaMigration = append(c.hooks.SchemaMigration, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `schemamigration.Intercept(f(g(h())))`.
func (c *SchemaMigrationClient) Intercept(interceptors ...Interceptor) {
	c.inters.SchemaMigration = append(c.inters.SchemaMigration, interceptors...)
}

// Create returns a builder for creating a SchemaMigration entity.
func (c *SchemaMigrationClient) Create() *SchemaMigrationCreate {
	mutation := newSchemaMigrationMutation(c.config, OpCreate)
	return &SchemaMigrationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SchemaMigration entities.
func (c *SchemaMigrationClient) CreateBulk(builders ...*SchemaMigrationCreate) *SchemaMigrationCreateBulk {
	return &SchemaMigrationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SchemaMigration.
func (c *SchemaMigrationClient) Update() *SchemaMigrationUpdate {
	mutation := newSchemaMigrationMutation(c.config, OpUpdate)
	return &SchemaMigrationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SchemaMigrationClient) UpdateOne(sm *SchemaMigration) *SchemaMigrationUpdateOne {
	mutation := newSchemaMigrationMutation(c.config, OpUpdateOne, withSchemaMigration(sm))
	return &SchemaMigrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SchemaMigrationClient) UpdateOneID(id string) *SchemaMigrationUpdateOne {
	mutation := newSchemaMigrationMutation(c.config, OpUpdateOne, withSchemaMigrationID(id))
	return &SchemaMigrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SchemaMigration.
func (c *SchemaMigrationClient) Delete() *SchemaMigrationDelete {
	mutation := newSchemaMigrationMutation(c.config, OpDelete)
	return &SchemaMigrationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SchemaMigrationClient) DeleteOne(sm *SchemaMigration) *SchemaMigrationDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SchemaMigrationClient) DeleteOneID(id string) *SchemaMigrationDeleteOne {
	builder := c.Delete().Where(schemamigration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SchemaMigrationDeleteOne{builder}
}

// Query returns a query builder for SchemaMigration.
func (c *SchemaMigrationClient) Query() *SchemaMigrationQuery {
	return &SchemaMigrationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSchemaMigration},
		inters: c.Interceptors(),
	}
}

// Get returns a SchemaMigration entity by its id.
func (c *SchemaMigrationClient) Get(ctx context.Context, id string) (*SchemaMigration, error) {
	return c.Query().Where(schemamigration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SchemaMigrationClient) GetX(ctx context.Context, id string) *SchemaMigration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SchemaMigrationClient) Hooks() []Hook {
	return c.hooks.SchemaMigration
}

// Interceptors returns the client interceptors.
func (c *SchemaMigrationClient) Interceptors() []Interceptor {
	return c.inters.SchemaMigration
}

func (c *SchemaMigrationClient) mutate(ctx context.Context, m *SchemaMigrationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SchemaMigrationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SchemaMigrationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SchemaMigrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SchemaMigrationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SchemaMigration mutation op: %q", m.Op())
	}
}

// TodoClient is a client for the Todo schema.
type TodoClient struct {
	config
}

// NewTodoClient returns a client for the Todo from the given config.
func NewTodoClient(c config) *TodoClient {
	return &TodoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `todo.Hooks(f(g(h())))`.
func (c *TodoClient) Use(hooks ...Hook) {
	c.hooks.Todo = append(c.hooks.Todo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `todo.Intercept(f(g(h())))`.
func (c *TodoClient) Intercept(interceptors ...Interceptor) {
	c.inters.Todo = append(c.inters.Todo, interceptors...)
}

// Create returns a builder for creating a Todo entity.
func (c *TodoClient) Create() *TodoCreate {
	mutation := newTodoMutation(c.config, OpCreate)
	return &TodoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Todo entities.
func (c *TodoClient) CreateBulk(builders ...*TodoCreate) *TodoCreateBulk {
	return &TodoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Todo.
func (c *TodoClient) Update() *TodoUpdate {
	mutation := newTodoMutation(c.config, OpUpdate)
	return &TodoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TodoClient) UpdateOne(t *Todo) *TodoUpdateOne {
	mutation := newTodoMutation(c.config, OpUpdateOne, withTodo(t))
	return &TodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TodoClient) UpdateOneID(id int) *TodoUpdateOne {
	mutation := newTodoMutation(c.config, OpUpdateOne, withTodoID(id))
	return &TodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Todo.
func (c *TodoClient) Delete() *TodoDelete {
	mutation := newTodoMutation(c.config, OpDelete)
	return &TodoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TodoClient) DeleteOne(t *Todo) *TodoDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TodoClient) DeleteOneID(id int) *TodoDeleteOne {
	builder := c.Delete().Where(todo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TodoDeleteOne{builder}
}

// Query returns a query builder for Todo.
func (c *TodoClient) Query() *TodoQuery {
	return &TodoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTodo},
		inters: c.Interceptors(),
	}
}

// Get returns a Todo entity by its id.
func (c *TodoClient) Get(ctx context.Context, id int) (*Todo, error) {
	return c.Query().Where(todo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TodoClient) GetX(ctx context.Context, id int) *Todo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTodoStatu queries the todo_statu edge of a Todo.
func (c *TodoClient) QueryTodoStatu(t *Todo) *TodoStatusQuery {
	query := (&TodoStatusClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(todo.Table, todo.FieldID, id),
			sqlgraph.To(todostatus.Table, todostatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, todo.TodoStatuTable, todo.TodoStatuColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Todo.
func (c *TodoClient) QueryUser(t *Todo) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(todo.Table, todo.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, todo.UserTable, todo.UserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TodoClient) Hooks() []Hook {
	return c.hooks.Todo
}

// Interceptors returns the client interceptors.
func (c *TodoClient) Interceptors() []Interceptor {
	return c.inters.Todo
}

func (c *TodoClient) mutate(ctx context.Context, m *TodoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TodoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TodoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TodoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TodoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Todo mutation op: %q", m.Op())
	}
}

// TodoStatusClient is a client for the TodoStatus schema.
type TodoStatusClient struct {
	config
}

// NewTodoStatusClient returns a client for the TodoStatus from the given config.
func NewTodoStatusClient(c config) *TodoStatusClient {
	return &TodoStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `todostatus.Hooks(f(g(h())))`.
func (c *TodoStatusClient) Use(hooks ...Hook) {
	c.hooks.TodoStatus = append(c.hooks.TodoStatus, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `todostatus.Intercept(f(g(h())))`.
func (c *TodoStatusClient) Intercept(interceptors ...Interceptor) {
	c.inters.TodoStatus = append(c.inters.TodoStatus, interceptors...)
}

// Create returns a builder for creating a TodoStatus entity.
func (c *TodoStatusClient) Create() *TodoStatusCreate {
	mutation := newTodoStatusMutation(c.config, OpCreate)
	return &TodoStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TodoStatus entities.
func (c *TodoStatusClient) CreateBulk(builders ...*TodoStatusCreate) *TodoStatusCreateBulk {
	return &TodoStatusCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TodoStatus.
func (c *TodoStatusClient) Update() *TodoStatusUpdate {
	mutation := newTodoStatusMutation(c.config, OpUpdate)
	return &TodoStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TodoStatusClient) UpdateOne(ts *TodoStatus) *TodoStatusUpdateOne {
	mutation := newTodoStatusMutation(c.config, OpUpdateOne, withTodoStatus(ts))
	return &TodoStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TodoStatusClient) UpdateOneID(id int) *TodoStatusUpdateOne {
	mutation := newTodoStatusMutation(c.config, OpUpdateOne, withTodoStatusID(id))
	return &TodoStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TodoStatus.
func (c *TodoStatusClient) Delete() *TodoStatusDelete {
	mutation := newTodoStatusMutation(c.config, OpDelete)
	return &TodoStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TodoStatusClient) DeleteOne(ts *TodoStatus) *TodoStatusDeleteOne {
	return c.DeleteOneID(ts.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TodoStatusClient) DeleteOneID(id int) *TodoStatusDeleteOne {
	builder := c.Delete().Where(todostatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TodoStatusDeleteOne{builder}
}

// Query returns a query builder for TodoStatus.
func (c *TodoStatusClient) Query() *TodoStatusQuery {
	return &TodoStatusQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTodoStatus},
		inters: c.Interceptors(),
	}
}

// Get returns a TodoStatus entity by its id.
func (c *TodoStatusClient) Get(ctx context.Context, id int) (*TodoStatus, error) {
	return c.Query().Where(todostatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TodoStatusClient) GetX(ctx context.Context, id int) *TodoStatus {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTodos queries the todos edge of a TodoStatus.
func (c *TodoStatusClient) QueryTodos(ts *TodoStatus) *TodoQuery {
	query := (&TodoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ts.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(todostatus.Table, todostatus.FieldID, id),
			sqlgraph.To(todo.Table, todo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, todostatus.TodosTable, todostatus.TodosColumn),
		)
		fromV = sqlgraph.Neighbors(ts.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TodoStatusClient) Hooks() []Hook {
	return c.hooks.TodoStatus
}

// Interceptors returns the client interceptors.
func (c *TodoStatusClient) Interceptors() []Interceptor {
	return c.inters.TodoStatus
}

func (c *TodoStatusClient) mutate(ctx context.Context, m *TodoStatusMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TodoStatusCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TodoStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TodoStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TodoStatusDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown TodoStatus mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTodos queries the todos edge of a User.
func (c *UserClient) QueryTodos(u *User) *TodoQuery {
	query := (&TodoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(todo.Table, todo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.TodosTable, user.TodosColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		ArInternalMetadatum, SchemaMigration, Todo, TodoStatus, User []ent.Hook
	}
	inters struct {
		ArInternalMetadatum, SchemaMigration, Todo, TodoStatus, User []ent.Interceptor
	}
)
