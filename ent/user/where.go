// Code generated by ent, DO NOT EDIT.

package user

import (
	"go-gql-sample/app/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Provider applies equality check predicate on the "provider" field. It's identical to ProviderEQ.
func Provider(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProvider, v))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUID, v))
}

// EncryptedPassword applies equality check predicate on the "encrypted_password" field. It's identical to EncryptedPasswordEQ.
func EncryptedPassword(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEncryptedPassword, v))
}

// ResetPasswordToken applies equality check predicate on the "reset_password_token" field. It's identical to ResetPasswordTokenEQ.
func ResetPasswordToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldResetPasswordToken, v))
}

// ResetPasswordSentAt applies equality check predicate on the "reset_password_sent_at" field. It's identical to ResetPasswordSentAtEQ.
func ResetPasswordSentAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldResetPasswordSentAt, v))
}

// AllowPasswordChange applies equality check predicate on the "allow_password_change" field. It's identical to AllowPasswordChangeEQ.
func AllowPasswordChange(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAllowPasswordChange, v))
}

// RememberCreatedAt applies equality check predicate on the "remember_created_at" field. It's identical to RememberCreatedAtEQ.
func RememberCreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRememberCreatedAt, v))
}

// ConfirmationToken applies equality check predicate on the "confirmation_token" field. It's identical to ConfirmationTokenEQ.
func ConfirmationToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldConfirmationToken, v))
}

// ConfirmedAt applies equality check predicate on the "confirmed_at" field. It's identical to ConfirmedAtEQ.
func ConfirmedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldConfirmedAt, v))
}

// ConfirmationSentAt applies equality check predicate on the "confirmation_sent_at" field. It's identical to ConfirmationSentAtEQ.
func ConfirmationSentAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldConfirmationSentAt, v))
}

// UnconfirmedEmail applies equality check predicate on the "unconfirmed_email" field. It's identical to UnconfirmedEmailEQ.
func UnconfirmedEmail(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUnconfirmedEmail, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// Image applies equality check predicate on the "image" field. It's identical to ImageEQ.
func Image(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldImage, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// ProviderEQ applies the EQ predicate on the "provider" field.
func ProviderEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldProvider, v))
}

// ProviderNEQ applies the NEQ predicate on the "provider" field.
func ProviderNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldProvider, v))
}

// ProviderIn applies the In predicate on the "provider" field.
func ProviderIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldProvider, vs...))
}

// ProviderNotIn applies the NotIn predicate on the "provider" field.
func ProviderNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldProvider, vs...))
}

// ProviderGT applies the GT predicate on the "provider" field.
func ProviderGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldProvider, v))
}

// ProviderGTE applies the GTE predicate on the "provider" field.
func ProviderGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldProvider, v))
}

// ProviderLT applies the LT predicate on the "provider" field.
func ProviderLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldProvider, v))
}

// ProviderLTE applies the LTE predicate on the "provider" field.
func ProviderLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldProvider, v))
}

// ProviderContains applies the Contains predicate on the "provider" field.
func ProviderContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldProvider, v))
}

// ProviderHasPrefix applies the HasPrefix predicate on the "provider" field.
func ProviderHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldProvider, v))
}

// ProviderHasSuffix applies the HasSuffix predicate on the "provider" field.
func ProviderHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldProvider, v))
}

// ProviderEqualFold applies the EqualFold predicate on the "provider" field.
func ProviderEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldProvider, v))
}

// ProviderContainsFold applies the ContainsFold predicate on the "provider" field.
func ProviderContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldProvider, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUID, vs...))
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUID, v))
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUID, v))
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUID, v))
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUID, v))
}

// UIDContains applies the Contains predicate on the "uid" field.
func UIDContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUID, v))
}

// UIDHasPrefix applies the HasPrefix predicate on the "uid" field.
func UIDHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUID, v))
}

// UIDHasSuffix applies the HasSuffix predicate on the "uid" field.
func UIDHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUID, v))
}

// UIDEqualFold applies the EqualFold predicate on the "uid" field.
func UIDEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUID, v))
}

// UIDContainsFold applies the ContainsFold predicate on the "uid" field.
func UIDContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUID, v))
}

// EncryptedPasswordEQ applies the EQ predicate on the "encrypted_password" field.
func EncryptedPasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEncryptedPassword, v))
}

// EncryptedPasswordNEQ applies the NEQ predicate on the "encrypted_password" field.
func EncryptedPasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEncryptedPassword, v))
}

// EncryptedPasswordIn applies the In predicate on the "encrypted_password" field.
func EncryptedPasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEncryptedPassword, vs...))
}

// EncryptedPasswordNotIn applies the NotIn predicate on the "encrypted_password" field.
func EncryptedPasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEncryptedPassword, vs...))
}

// EncryptedPasswordGT applies the GT predicate on the "encrypted_password" field.
func EncryptedPasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEncryptedPassword, v))
}

// EncryptedPasswordGTE applies the GTE predicate on the "encrypted_password" field.
func EncryptedPasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEncryptedPassword, v))
}

// EncryptedPasswordLT applies the LT predicate on the "encrypted_password" field.
func EncryptedPasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEncryptedPassword, v))
}

// EncryptedPasswordLTE applies the LTE predicate on the "encrypted_password" field.
func EncryptedPasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEncryptedPassword, v))
}

// EncryptedPasswordContains applies the Contains predicate on the "encrypted_password" field.
func EncryptedPasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEncryptedPassword, v))
}

// EncryptedPasswordHasPrefix applies the HasPrefix predicate on the "encrypted_password" field.
func EncryptedPasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEncryptedPassword, v))
}

// EncryptedPasswordHasSuffix applies the HasSuffix predicate on the "encrypted_password" field.
func EncryptedPasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEncryptedPassword, v))
}

// EncryptedPasswordEqualFold applies the EqualFold predicate on the "encrypted_password" field.
func EncryptedPasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEncryptedPassword, v))
}

// EncryptedPasswordContainsFold applies the ContainsFold predicate on the "encrypted_password" field.
func EncryptedPasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEncryptedPassword, v))
}

// ResetPasswordTokenEQ applies the EQ predicate on the "reset_password_token" field.
func ResetPasswordTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldResetPasswordToken, v))
}

// ResetPasswordTokenNEQ applies the NEQ predicate on the "reset_password_token" field.
func ResetPasswordTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldResetPasswordToken, v))
}

// ResetPasswordTokenIn applies the In predicate on the "reset_password_token" field.
func ResetPasswordTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldResetPasswordToken, vs...))
}

// ResetPasswordTokenNotIn applies the NotIn predicate on the "reset_password_token" field.
func ResetPasswordTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldResetPasswordToken, vs...))
}

// ResetPasswordTokenGT applies the GT predicate on the "reset_password_token" field.
func ResetPasswordTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldResetPasswordToken, v))
}

// ResetPasswordTokenGTE applies the GTE predicate on the "reset_password_token" field.
func ResetPasswordTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldResetPasswordToken, v))
}

// ResetPasswordTokenLT applies the LT predicate on the "reset_password_token" field.
func ResetPasswordTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldResetPasswordToken, v))
}

// ResetPasswordTokenLTE applies the LTE predicate on the "reset_password_token" field.
func ResetPasswordTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldResetPasswordToken, v))
}

// ResetPasswordTokenContains applies the Contains predicate on the "reset_password_token" field.
func ResetPasswordTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldResetPasswordToken, v))
}

// ResetPasswordTokenHasPrefix applies the HasPrefix predicate on the "reset_password_token" field.
func ResetPasswordTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldResetPasswordToken, v))
}

// ResetPasswordTokenHasSuffix applies the HasSuffix predicate on the "reset_password_token" field.
func ResetPasswordTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldResetPasswordToken, v))
}

// ResetPasswordTokenIsNil applies the IsNil predicate on the "reset_password_token" field.
func ResetPasswordTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldResetPasswordToken))
}

// ResetPasswordTokenNotNil applies the NotNil predicate on the "reset_password_token" field.
func ResetPasswordTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldResetPasswordToken))
}

// ResetPasswordTokenEqualFold applies the EqualFold predicate on the "reset_password_token" field.
func ResetPasswordTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldResetPasswordToken, v))
}

// ResetPasswordTokenContainsFold applies the ContainsFold predicate on the "reset_password_token" field.
func ResetPasswordTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldResetPasswordToken, v))
}

// ResetPasswordSentAtEQ applies the EQ predicate on the "reset_password_sent_at" field.
func ResetPasswordSentAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldResetPasswordSentAt, v))
}

// ResetPasswordSentAtNEQ applies the NEQ predicate on the "reset_password_sent_at" field.
func ResetPasswordSentAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldResetPasswordSentAt, v))
}

// ResetPasswordSentAtIn applies the In predicate on the "reset_password_sent_at" field.
func ResetPasswordSentAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldResetPasswordSentAt, vs...))
}

// ResetPasswordSentAtNotIn applies the NotIn predicate on the "reset_password_sent_at" field.
func ResetPasswordSentAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldResetPasswordSentAt, vs...))
}

// ResetPasswordSentAtGT applies the GT predicate on the "reset_password_sent_at" field.
func ResetPasswordSentAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldResetPasswordSentAt, v))
}

// ResetPasswordSentAtGTE applies the GTE predicate on the "reset_password_sent_at" field.
func ResetPasswordSentAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldResetPasswordSentAt, v))
}

// ResetPasswordSentAtLT applies the LT predicate on the "reset_password_sent_at" field.
func ResetPasswordSentAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldResetPasswordSentAt, v))
}

// ResetPasswordSentAtLTE applies the LTE predicate on the "reset_password_sent_at" field.
func ResetPasswordSentAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldResetPasswordSentAt, v))
}

// ResetPasswordSentAtIsNil applies the IsNil predicate on the "reset_password_sent_at" field.
func ResetPasswordSentAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldResetPasswordSentAt))
}

// ResetPasswordSentAtNotNil applies the NotNil predicate on the "reset_password_sent_at" field.
func ResetPasswordSentAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldResetPasswordSentAt))
}

// AllowPasswordChangeEQ applies the EQ predicate on the "allow_password_change" field.
func AllowPasswordChangeEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldAllowPasswordChange, v))
}

// AllowPasswordChangeNEQ applies the NEQ predicate on the "allow_password_change" field.
func AllowPasswordChangeNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldAllowPasswordChange, v))
}

// AllowPasswordChangeIsNil applies the IsNil predicate on the "allow_password_change" field.
func AllowPasswordChangeIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldAllowPasswordChange))
}

// AllowPasswordChangeNotNil applies the NotNil predicate on the "allow_password_change" field.
func AllowPasswordChangeNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldAllowPasswordChange))
}

// RememberCreatedAtEQ applies the EQ predicate on the "remember_created_at" field.
func RememberCreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldRememberCreatedAt, v))
}

// RememberCreatedAtNEQ applies the NEQ predicate on the "remember_created_at" field.
func RememberCreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldRememberCreatedAt, v))
}

// RememberCreatedAtIn applies the In predicate on the "remember_created_at" field.
func RememberCreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldRememberCreatedAt, vs...))
}

// RememberCreatedAtNotIn applies the NotIn predicate on the "remember_created_at" field.
func RememberCreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldRememberCreatedAt, vs...))
}

// RememberCreatedAtGT applies the GT predicate on the "remember_created_at" field.
func RememberCreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldRememberCreatedAt, v))
}

// RememberCreatedAtGTE applies the GTE predicate on the "remember_created_at" field.
func RememberCreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldRememberCreatedAt, v))
}

// RememberCreatedAtLT applies the LT predicate on the "remember_created_at" field.
func RememberCreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldRememberCreatedAt, v))
}

// RememberCreatedAtLTE applies the LTE predicate on the "remember_created_at" field.
func RememberCreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldRememberCreatedAt, v))
}

// RememberCreatedAtIsNil applies the IsNil predicate on the "remember_created_at" field.
func RememberCreatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldRememberCreatedAt))
}

// RememberCreatedAtNotNil applies the NotNil predicate on the "remember_created_at" field.
func RememberCreatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldRememberCreatedAt))
}

// ConfirmationTokenEQ applies the EQ predicate on the "confirmation_token" field.
func ConfirmationTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldConfirmationToken, v))
}

// ConfirmationTokenNEQ applies the NEQ predicate on the "confirmation_token" field.
func ConfirmationTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldConfirmationToken, v))
}

// ConfirmationTokenIn applies the In predicate on the "confirmation_token" field.
func ConfirmationTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldConfirmationToken, vs...))
}

// ConfirmationTokenNotIn applies the NotIn predicate on the "confirmation_token" field.
func ConfirmationTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldConfirmationToken, vs...))
}

// ConfirmationTokenGT applies the GT predicate on the "confirmation_token" field.
func ConfirmationTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldConfirmationToken, v))
}

// ConfirmationTokenGTE applies the GTE predicate on the "confirmation_token" field.
func ConfirmationTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldConfirmationToken, v))
}

// ConfirmationTokenLT applies the LT predicate on the "confirmation_token" field.
func ConfirmationTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldConfirmationToken, v))
}

// ConfirmationTokenLTE applies the LTE predicate on the "confirmation_token" field.
func ConfirmationTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldConfirmationToken, v))
}

// ConfirmationTokenContains applies the Contains predicate on the "confirmation_token" field.
func ConfirmationTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldConfirmationToken, v))
}

// ConfirmationTokenHasPrefix applies the HasPrefix predicate on the "confirmation_token" field.
func ConfirmationTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldConfirmationToken, v))
}

// ConfirmationTokenHasSuffix applies the HasSuffix predicate on the "confirmation_token" field.
func ConfirmationTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldConfirmationToken, v))
}

// ConfirmationTokenIsNil applies the IsNil predicate on the "confirmation_token" field.
func ConfirmationTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldConfirmationToken))
}

// ConfirmationTokenNotNil applies the NotNil predicate on the "confirmation_token" field.
func ConfirmationTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldConfirmationToken))
}

// ConfirmationTokenEqualFold applies the EqualFold predicate on the "confirmation_token" field.
func ConfirmationTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldConfirmationToken, v))
}

// ConfirmationTokenContainsFold applies the ContainsFold predicate on the "confirmation_token" field.
func ConfirmationTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldConfirmationToken, v))
}

// ConfirmedAtEQ applies the EQ predicate on the "confirmed_at" field.
func ConfirmedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldConfirmedAt, v))
}

// ConfirmedAtNEQ applies the NEQ predicate on the "confirmed_at" field.
func ConfirmedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldConfirmedAt, v))
}

// ConfirmedAtIn applies the In predicate on the "confirmed_at" field.
func ConfirmedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldConfirmedAt, vs...))
}

// ConfirmedAtNotIn applies the NotIn predicate on the "confirmed_at" field.
func ConfirmedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldConfirmedAt, vs...))
}

// ConfirmedAtGT applies the GT predicate on the "confirmed_at" field.
func ConfirmedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldConfirmedAt, v))
}

// ConfirmedAtGTE applies the GTE predicate on the "confirmed_at" field.
func ConfirmedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldConfirmedAt, v))
}

// ConfirmedAtLT applies the LT predicate on the "confirmed_at" field.
func ConfirmedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldConfirmedAt, v))
}

// ConfirmedAtLTE applies the LTE predicate on the "confirmed_at" field.
func ConfirmedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldConfirmedAt, v))
}

// ConfirmedAtIsNil applies the IsNil predicate on the "confirmed_at" field.
func ConfirmedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldConfirmedAt))
}

// ConfirmedAtNotNil applies the NotNil predicate on the "confirmed_at" field.
func ConfirmedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldConfirmedAt))
}

// ConfirmationSentAtEQ applies the EQ predicate on the "confirmation_sent_at" field.
func ConfirmationSentAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldConfirmationSentAt, v))
}

// ConfirmationSentAtNEQ applies the NEQ predicate on the "confirmation_sent_at" field.
func ConfirmationSentAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldConfirmationSentAt, v))
}

// ConfirmationSentAtIn applies the In predicate on the "confirmation_sent_at" field.
func ConfirmationSentAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldConfirmationSentAt, vs...))
}

// ConfirmationSentAtNotIn applies the NotIn predicate on the "confirmation_sent_at" field.
func ConfirmationSentAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldConfirmationSentAt, vs...))
}

// ConfirmationSentAtGT applies the GT predicate on the "confirmation_sent_at" field.
func ConfirmationSentAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldConfirmationSentAt, v))
}

// ConfirmationSentAtGTE applies the GTE predicate on the "confirmation_sent_at" field.
func ConfirmationSentAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldConfirmationSentAt, v))
}

// ConfirmationSentAtLT applies the LT predicate on the "confirmation_sent_at" field.
func ConfirmationSentAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldConfirmationSentAt, v))
}

// ConfirmationSentAtLTE applies the LTE predicate on the "confirmation_sent_at" field.
func ConfirmationSentAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldConfirmationSentAt, v))
}

// ConfirmationSentAtIsNil applies the IsNil predicate on the "confirmation_sent_at" field.
func ConfirmationSentAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldConfirmationSentAt))
}

// ConfirmationSentAtNotNil applies the NotNil predicate on the "confirmation_sent_at" field.
func ConfirmationSentAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldConfirmationSentAt))
}

// UnconfirmedEmailEQ applies the EQ predicate on the "unconfirmed_email" field.
func UnconfirmedEmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUnconfirmedEmail, v))
}

// UnconfirmedEmailNEQ applies the NEQ predicate on the "unconfirmed_email" field.
func UnconfirmedEmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUnconfirmedEmail, v))
}

// UnconfirmedEmailIn applies the In predicate on the "unconfirmed_email" field.
func UnconfirmedEmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUnconfirmedEmail, vs...))
}

// UnconfirmedEmailNotIn applies the NotIn predicate on the "unconfirmed_email" field.
func UnconfirmedEmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUnconfirmedEmail, vs...))
}

// UnconfirmedEmailGT applies the GT predicate on the "unconfirmed_email" field.
func UnconfirmedEmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUnconfirmedEmail, v))
}

// UnconfirmedEmailGTE applies the GTE predicate on the "unconfirmed_email" field.
func UnconfirmedEmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUnconfirmedEmail, v))
}

// UnconfirmedEmailLT applies the LT predicate on the "unconfirmed_email" field.
func UnconfirmedEmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUnconfirmedEmail, v))
}

// UnconfirmedEmailLTE applies the LTE predicate on the "unconfirmed_email" field.
func UnconfirmedEmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUnconfirmedEmail, v))
}

// UnconfirmedEmailContains applies the Contains predicate on the "unconfirmed_email" field.
func UnconfirmedEmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUnconfirmedEmail, v))
}

// UnconfirmedEmailHasPrefix applies the HasPrefix predicate on the "unconfirmed_email" field.
func UnconfirmedEmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUnconfirmedEmail, v))
}

// UnconfirmedEmailHasSuffix applies the HasSuffix predicate on the "unconfirmed_email" field.
func UnconfirmedEmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUnconfirmedEmail, v))
}

// UnconfirmedEmailIsNil applies the IsNil predicate on the "unconfirmed_email" field.
func UnconfirmedEmailIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUnconfirmedEmail))
}

// UnconfirmedEmailNotNil applies the NotNil predicate on the "unconfirmed_email" field.
func UnconfirmedEmailNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUnconfirmedEmail))
}

// UnconfirmedEmailEqualFold applies the EqualFold predicate on the "unconfirmed_email" field.
func UnconfirmedEmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUnconfirmedEmail, v))
}

// UnconfirmedEmailContainsFold applies the ContainsFold predicate on the "unconfirmed_email" field.
func UnconfirmedEmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUnconfirmedEmail, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldName, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameIsNil applies the IsNil predicate on the "nickname" field.
func NicknameIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldNickname))
}

// NicknameNotNil applies the NotNil predicate on the "nickname" field.
func NicknameNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldNickname))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldNickname, v))
}

// ImageEQ applies the EQ predicate on the "image" field.
func ImageEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldImage, v))
}

// ImageNEQ applies the NEQ predicate on the "image" field.
func ImageNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldImage, v))
}

// ImageIn applies the In predicate on the "image" field.
func ImageIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldImage, vs...))
}

// ImageNotIn applies the NotIn predicate on the "image" field.
func ImageNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldImage, vs...))
}

// ImageGT applies the GT predicate on the "image" field.
func ImageGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldImage, v))
}

// ImageGTE applies the GTE predicate on the "image" field.
func ImageGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldImage, v))
}

// ImageLT applies the LT predicate on the "image" field.
func ImageLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldImage, v))
}

// ImageLTE applies the LTE predicate on the "image" field.
func ImageLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldImage, v))
}

// ImageContains applies the Contains predicate on the "image" field.
func ImageContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldImage, v))
}

// ImageHasPrefix applies the HasPrefix predicate on the "image" field.
func ImageHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldImage, v))
}

// ImageHasSuffix applies the HasSuffix predicate on the "image" field.
func ImageHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldImage, v))
}

// ImageIsNil applies the IsNil predicate on the "image" field.
func ImageIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldImage))
}

// ImageNotNil applies the NotNil predicate on the "image" field.
func ImageNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldImage))
}

// ImageEqualFold applies the EqualFold predicate on the "image" field.
func ImageEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldImage, v))
}

// ImageContainsFold applies the ContainsFold predicate on the "image" field.
func ImageContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldImage, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailIsNil applies the IsNil predicate on the "email" field.
func EmailIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldEmail))
}

// EmailNotNil applies the NotNil predicate on the "email" field.
func EmailNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldEmail))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldEmail, v))
}

// TokensIsNil applies the IsNil predicate on the "tokens" field.
func TokensIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldTokens))
}

// TokensNotNil applies the NotNil predicate on the "tokens" field.
func TokensNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldTokens))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasTodos applies the HasEdge predicate on the "todos" edge.
func HasTodos() predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TodosTable, TodosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTodosWith applies the HasEdge predicate on the "todos" edge with a given conditions (other predicates).
func HasTodosWith(preds ...predicate.Todo) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TodosInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TodosTable, TodosColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
