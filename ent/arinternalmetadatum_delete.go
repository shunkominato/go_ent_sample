// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"go-gql-sample/app/ent/arinternalmetadatum"
	"go-gql-sample/app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArInternalMetadatumDelete is the builder for deleting a ArInternalMetadatum entity.
type ArInternalMetadatumDelete struct {
	config
	hooks    []Hook
	mutation *ArInternalMetadatumMutation
}

// Where appends a list predicates to the ArInternalMetadatumDelete builder.
func (aimd *ArInternalMetadatumDelete) Where(ps ...predicate.ArInternalMetadatum) *ArInternalMetadatumDelete {
	aimd.mutation.Where(ps...)
	return aimd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (aimd *ArInternalMetadatumDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, ArInternalMetadatumMutation](ctx, aimd.sqlExec, aimd.mutation, aimd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (aimd *ArInternalMetadatumDelete) ExecX(ctx context.Context) int {
	n, err := aimd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (aimd *ArInternalMetadatumDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(arinternalmetadatum.Table, sqlgraph.NewFieldSpec(arinternalmetadatum.FieldID, field.TypeString))
	if ps := aimd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, aimd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	aimd.mutation.done = true
	return affected, err
}

// ArInternalMetadatumDeleteOne is the builder for deleting a single ArInternalMetadatum entity.
type ArInternalMetadatumDeleteOne struct {
	aimd *ArInternalMetadatumDelete
}

// Where appends a list predicates to the ArInternalMetadatumDelete builder.
func (aimdo *ArInternalMetadatumDeleteOne) Where(ps ...predicate.ArInternalMetadatum) *ArInternalMetadatumDeleteOne {
	aimdo.aimd.mutation.Where(ps...)
	return aimdo
}

// Exec executes the deletion query.
func (aimdo *ArInternalMetadatumDeleteOne) Exec(ctx context.Context) error {
	n, err := aimdo.aimd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{arinternalmetadatum.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (aimdo *ArInternalMetadatumDeleteOne) ExecX(ctx context.Context) {
	if err := aimdo.Exec(ctx); err != nil {
		panic(err)
	}
}
