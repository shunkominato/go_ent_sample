package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"go-gql-sample/app/internal/application/usecase/todo"
	"go-gql-sample/app/internal/application/usecase/user"
	todoDomain "go-gql-sample/app/internal/dmain/entity/todo"
	"go-gql-sample/app/internal/graph"
	"go-gql-sample/app/internal/graph/model"
	"go-gql-sample/app/internal/graph/validation"
	"go-gql-sample/app/internal/infrastructure/persistence"
	"log"

	"github.com/samber/lo"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	if err := validation.ValidateInputModel(input); err != nil {
		return nil, err
	}

	td := &todoDomain.SaveTodoInputDto{
		Text:   input.Text,
		UserID: input.UserID,
	}
	todoRepo := persistence.NewTodoRepository(r.client)
	todoUsecase := todo.NewTodoUsecase(todoRepo)

	todo, err := todoUsecase.Create(ctx, td)
	if err != nil {
		return nil, err
	}

	model := &model.Todo{
		Text: todo.Text,
		ID:   todo.ID,
		Done: todo.Done,
	}

	return model, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, input []*int) ([]*model.Todo, error) {
	
	ids := lo.Map(input, func(id *int, index int) int {
    return *id
	})

	todoRepo := persistence.NewTodoRepository(r.client)
	todoUsecase := todo.NewTodoUsecase(todoRepo)
	todoList, err := todoUsecase.Get(ctx, ids)
	if err != nil {
		return nil, err
	}

	var result []*model.Todo
	for _, t := range todoList {
		result = append(result, &model.Todo{
			ID:   t.ID,
			Text: t.Text,
			User: &model.User{ID: t.User.ID, Name: t.User.Name},
		})
	}

	return result, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	log.Print("-user-----")
	log.Print("%v", obj)

	userRepo := persistence.NewUserRepository(r.client)
	userUsecase := user.NewUserUsecase(userRepo)

	var ids []int
	ids = append(ids, obj.User.ID)
	userList, err := userUsecase.Get(ctx, ids)
	var result *model.User
	if len(userList) > 0 {
		firstUser := userList[0]
		result = &model.User{
			ID:   firstUser.ID,
			Name: firstUser.Name,
		}
	} else {
		result = &model.User{}
	}
	if err != nil {
		return result, err
	}
	return result, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

// Todo returns graph.TodoResolver implementation.
func (r *Resolver) Todo() graph.TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
